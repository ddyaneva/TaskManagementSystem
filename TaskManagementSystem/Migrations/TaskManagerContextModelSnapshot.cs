// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementSystem.Models;

namespace TaskManagementSystem.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    partial class TaskManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("TaskManagementSystem.Models.Account", b =>
                {
                    b.Property<int>("account_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("account_id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Board", b =>
                {
                    b.Property<int>("board_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("owner_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("board_id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("owner_id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.BoardMember", b =>
                {
                    b.Property<int>("board_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("account_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("board_id");

                    b.HasIndex("account_id");

                    b.ToTable("BoardMembers");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Project", b =>
                {
                    b.Property<int>("project_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("owner_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("project_id");

                    b.HasIndex("key")
                        .IsUnique();

                    b.HasIndex("owner_id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.Property<int>("task_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("assigedToaccount_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("assigned_to")
                        .HasColumnType("INTEGER");

                    b.Property<int>("board_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<int>("priority")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("project_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("reported_by")
                        .HasColumnType("INTEGER");

                    b.Property<int>("status")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("story_points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("type")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("task_id");

                    b.HasIndex("assigedToaccount_id");

                    b.HasIndex("board_id");

                    b.HasIndex("project_id");

                    b.HasIndex("reported_by");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Board", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Account", "owner")
                        .WithMany()
                        .HasForeignKey("owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Models.BoardMember", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Account", "accountId")
                        .WithMany()
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Board", "boardId")
                        .WithMany()
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Project", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Account", "owner")
                        .WithMany()
                        .HasForeignKey("owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Account", "assigedTo")
                        .WithMany()
                        .HasForeignKey("assigedToaccount_id");

                    b.HasOne("TaskManagementSystem.Models.Board", "board")
                        .WithMany()
                        .HasForeignKey("board_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Project", "project")
                        .WithMany()
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Models.Account", "reportedBy")
                        .WithMany()
                        .HasForeignKey("reported_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
